const mongoose = require("mongoose");

const maxBase64Size = 2 * 1024 * 1024;

const base64Validator = {
    validator: function(v) {
        const sizeInBytes = Buffer.from(v || "", "base64").length;
        return sizeInBytes <= maxBase64Size;
    },
    message: "File must be â‰¤ 2MB",
};

const studentSchema = new mongoose.Schema({
    fullName: { type: String, required: true, trim: true },
    dateOfBirth: { type: Date },
    gender: { type: String, enum: ["Male", "Female", "Other"] },
    mobileNumber: {
        type: String,
        match: /^[6-9]\d{9}$/,
    },
    emailAddress: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
    },
    highestQualification: { type: String },
    courseOrStream: { type: String },
    collegeOrUniversity: { type: String },
    yearOfPassing: { type: Number },
    academicStatus: { type: String, enum: ["Completed", "Pursuing"] },
    currentCity: { type: String },
    state: { type: String },
    pincode: { type: String, match: /^\d{6}$/ },
    preferredJobRole: { type: String },
    jobType: {
        type: String,
        enum: ["Full Time", "Part Time", "Internship", "Freelance"],
    },
    willingToRelocate: { type: String, enum: ["Yes", "No"] },
    expectedSalary: { type: Number },

    resume: {
        type: String,

        validate: base64Validator,
    },
    photo: {
        type: String,

        validate: base64Validator,
    },

    studentID: { type: String, unique: true },
    password: { type: String },

    portfolioURL: { type: String },
    linkedInURL: { type: String },
    gitHubURL: { type: String },

    skills: {
        type: [String],
        enum: [
            "HTML",
            "CSS",
            "JavaScript",
            "TypeScript",
            "React.js",
            "Redux",
            "Next.js",
            "Node.js",
            "Express.js",
            "MongoDB",
            "Mongoose",
            "REST API",
            "GraphQL",
            "WebSockets",
            "Socket.IO",
            "JWT",
            "OAuth",
            "Bcrypt",
            "Passport.js",
            "Git",
            "GitHub",
            "GitLab",
            "Docker",
            "CI/CD",
            "Linux",
            "Nginx",
            "PM2",
            "AWS",
            "Firebase",
            "Vercel",
            "Netlify",
            "Postman",
            "Axios",
            "Tailwind CSS",
            "Bootstrap",
            "Material UI",
            "Webpack",
            "Babel",
            "Vite",
            "Responsive Design",
            "PWA",
            "SSR",
            "SEO Basics",
            "Testing (Jest, Mocha, Chai)",
            "ESLint",
            "Prettier",
            "Agile",
            "Scrum",
            "Jira",
            "Figma",
            "UI/UX Basics",
            "MySQL",
            "PostgreSQL",
            "Redis",
            "RabbitMQ",
            "Kafka",
            "Cloudinary",
            "Multer",
            "Stripe",
            "Razorpay",
            "Agile Development",
            "API Rate Limiting",
            "Load Balancing",
            "Data Structures",
            "Algorithms",
            "MVC",
            "MVVM",
            "Clean Code",
            "Design Patterns",
            "Error Handling",
            "Caching",
            "Throttling",
            "Pagination",
            "Infinite Scroll",
            "Code Splitting",
            "Lazy Loading",
            "Environment Variables",
            ".env Config",
            "Web Security",
            "CORS",
            "CSRF",
            "XSS",
            "SSRF",
            "HTTPS",
            "SSL",
            "Domain & DNS",
            "Webhooks",
            "Email Services (Nodemailer, Mailgun)",
            "CRON Jobs",
            "File Uploads",
            "Authentication Flows",
            "Role-Based Access Control",
            "Admin Dashboards",
            "Logging",
            "Analytics Integration (GA, Mixpanel)",
            "Performance Optimization",
            "Lighthouse Audit",
        ],
    },

    languages: {
        type: [String],
        enum: [
            "English",
            "Hindi",
            "Marathi",
            "Tamil",
            "Telugu",
            "Kannada",
            "Gujarati",
            "Bengali",
            "Punjabi",
            "Malayalam",
            "Urdu",
            "Others",
        ],
    },

    otp: { type: String },
    otpExpiresAt: { type: Date, index: { expires: "2m" } },
    verified: { type: Boolean, default: false },
}, { timestamps: true });

module.exports = mongoose.model("Student", studentSchema);